import edu.princeton.cs.algs4.StdRandom;
import edu.princeton.cs.algs4.StdStats;

public class PercolationStats
{
    private double[] percoshreshold;
    private double area;
    private int gridwidth;
    private int T;

    public PercolationStats( int n , int trials )
    {
        if( n<=0 || trials<=0 )
        {
            throw new IllegalArgumentException();
        }
        gridwidth = n;
        area = n * n;
        T = trials;
        percoshreshold = new double[T];
        for ( int i=0 ; i<T ; i++ )
        {
            Percolation perc = new Percolation(n);
            while( !perc.percolates() )
            {
                int row = StdRandom.uniform(n) + 1;
                int col = StdRandom.uniform(n) + 1;
                perc.open( row , col );
            }
            percoshreshold[i] = perc.numberOfOpenSites() / n;
        }
    }

    public double mean()
    {
        return StdStats.mean(percoshreshold);
    }

    public double stddev()
    {
        return StdStats.stddev(percoshreshold);
    }

    public double confidenceLo()
    {
        double stddev = StdStats.stddev((percoshreshold));
        double mean = StdStats.mean(percoshreshold);

        return mean - stddev * 1.96 / Math.sqrt(T);
    }

    public double confidenceHi()
    {
        double stddev = StdStats.stddev((percoshreshold));
        double mean = StdStats.mean(percoshreshold);

        return mean + stddev * 1.96 / Math.sqrt(T);
    }

    public static void main(String[] args)
    {
        if ( args.length != 2 )
        {
            System.out.println( "Usage: java-algs4 PercolationStats n T" );
            return;
        }
        int n = Integer.parseInt(args[0]);
        int T = Integer.parseInt(args[1]);
        PercolationStats percStats = new PercolationStats( n , T );
        System.out.println( "mean                    = " + percStats.mean() );
        System.out.println( "stddev                  = " + percStats.stddev() );
        System.out.println( "95% confidence interval = [" + percStats.confidenceLo() + "," + percStats.confidenceHi() + "]" );
    }
}
